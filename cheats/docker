# Start docker daemon
docker -d

# start a container with an interactive shell
docker run -ti <image_name> /bin/bash

# exemple run container with python:3 and delete all created files
docker run -it --rm python:3 bash

# container with mounted volume in read-only
docker run -it -v "/source:/dest:ro" <image_name> bash

# "shell" into a running container (docker-1.3+)
docker exec -ti <container_name> bash

# inspect a running container
docker inspect <container_name> (or <container_id>)

# Get the process ID for a container
# Source: https://github.com/jpetazzo/nsenter
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
# Source:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

# Copy files/folders between a container and your host
docker cp foo.txt mycontainer:/foo.txt

# list currently running containers
docker ps

# list all containers
docker ps -a

# list all images
docker images

IF: dpkg: error: error creating new backup file '/var/lib/dpkg/status-old': Invalid cross-device link E: Sub-process /usr/bin/dpkg returned an error code (2)
DO: echo N | sudo tee /sys/module/overlay/parameters/metacopy

# command for launch GUI soft, sometimes custom Dockerfile is needed
--user $UID -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix <container_name>

# Remove shit
for image in $(docker images | grep "^<none>" | awk '{print $3}'); do docker rmi $image; done
# in case there is no important data in volumes:
sudo rm -rf /var/lib/docker/volumes
